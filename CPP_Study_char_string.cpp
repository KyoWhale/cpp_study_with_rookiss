#include <iostream>
using namespace std;

// char도 정수지만 문자 의미를 나타내기 위해 따로 자료형을 만듬
// char : 알파벳 / 숫자 문자를 나타낸다
// wchar_t : 유니코드 문자를 나타낸다

// ASCII ()

// 문자의 의미로 작은 따옴표 ''사용
char ch1 = 'a';
char ch2 = 97;
char ch3 = 'a' + 1;

char ch4 = '1';
char ch5 = 49;

// 국제화 시대에 영어만으로 서비스할 수 없음
// 전 세계 모든 문자에 대해 유일 코드를 부여한 것이 유니코드
// 참고) 유니코드에서 가장 많은 번호를 차지하는게 한국어와 중국어
// 유니코드는 표기 방식이 여러가지 대표적으로 UTF8, UTF16
// UTF8
// - 알파벳, 숫자 1바이트 (ASCII 동일한 번호)
// - 유럽 지역의 문자는 2바이트
// - 한글, 한자 등 3바이트
// UTF16
// - 알파벳 숫자 한글 한자 등 거의 대부분 문자 2바이트
// - 매우 드물게 고대 문자만 4바이트 (무시해도됨)
wchar_t wch = L'안';

// Escape Sequence
// 표기하기 애매한 애들을 표현
// \t 아스키코드9 = Tab
// \n 아스키코드10 = LineFeed(한 줄 아래로)
// \r 아스키코드13 = CarriageReturn (커서 << )

// 문자열
// 문자들이 열을 지어서 모여 있는 것
// 정수 (1~8Byte) 고정 길이
// 단어, 문장은 가지각색이기 때문에 고정 길이로 하기 까다로움
// 끝은 NULL (0)
char str[] = {'h', 'e', 'l', 'l', 'o'}; // 데이터 영역, 뒤쪽 공간이 0으로 초기화 되기 때문에 NULL을 안써도 문장의 끝을 알 수 있음

int main()
{
    char str2[] = {'h', 'e', 'l', 'l', 'o', '\0'}; // 스택 영역, 나머지 공간 초기화가 0으로 안 됨 그렇기 떄문에 \0을 하여 문장의 끝을 알려줘야함
    char str3[] = "Hello World"; // 알아서 \0이 끝에 있음
    cout << ch1 << endl;

    // cout 은 char 전용이기 떄문에 wcout사용해야함
    cout << wch << endl;
    // wcout을 사용해도 한글을 출력하기 위해서 인식하기 위해 코드 한줄 작성해야함
    // wcout.imbue(locale("kor"));
    // wcout << wch << endl;
}